#!/usr/bin/env node
var p=Object.create;var i=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var h=(s,r,e,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let t of u(r))!f.call(s,t)&&t!==e&&i(s,t,{get:()=>r[t],enumerable:!(o=w(r,t))||o.enumerable});return s};var m=(s,r,e)=>(e=s!=null?p(g(s)):{},h(r||!s||!s.__esModule?i(e,"default",{value:s,enumerable:!0}):e,s));var c=m(require("node:readline"),1),n=require("node:process");var l=globalThis.crypto;globalThis.isPasswordLeaked=a;async function a(s){if(typeof s!="string")throw new Error("Password must be a string");let r=await l.subtle.digest("SHA-1",new TextEncoder().encode(s)),e=Array.from(new Uint8Array(r)).map(d=>d.toString(16).padStart(2,"0")).join(""),o=e.substring(0,5).toUpperCase();return(await(await fetch(`https://api.pwnedpasswords.com/range/${o}`)).text()).includes(e.substring(5).toUpperCase())}var y=process.argv.slice(2);async function P(){let s=c.default.createInterface({input:n.stdin,output:n.stdout});return new Promise(r=>{s.question("Enter password to check: ",e=>{s.close(),r(e)})})}async function b(){try{let s=y[0]||await P(),r=await a(s);console.log(`Password ${r?"has":"has not"} been compromised`),process.exit(r?1:0)}catch(s){console.error("Error:",s.message),process.exit(1)}}b();
//# sourceMappingURL=cli.js.map
